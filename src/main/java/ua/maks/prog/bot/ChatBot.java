package ua.maks.prog.bot;

import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import org.aspectj.weaver.ast.Or;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ua.maks.prog.config.BotConfig;
import ua.maks.prog.entity.Counter;
import ua.maks.prog.entity.Order;
import ua.maks.prog.entity.Sales;
import ua.maks.prog.model.UserData;
import ua.maks.prog.service.*;
import ua.maks.prog.views.AdminAction;
import ua.maks.prog.views.MonthView;
import ua.maks.prog.views.OrderStatus;

import java.time.*;
import java.util.*;

@Component
public class ChatBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final EggsService eggsService;
    private final CounterService counterService;
    private final SalesService salesService;
    private final BotAdminService botAdminService;
    private final OrderService orderService;
    private final Map<Long, UserData> pendingOrders = new HashMap<>();
    private final Map<Long, AdminAction> adminStates = new HashMap<>();

    public ChatBot(BotConfig botConfig, EggsService eggsService, CounterService counterService,
                   SalesService salesService, BotAdminService botAdminService, OrderService orderService
    ) {
        this.botConfig = botConfig;
        this.eggsService = eggsService;
        this.counterService = counterService;
        this.salesService = salesService;
        this.botAdminService = botAdminService;
        this.orderService = orderService;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasCallbackQuery()) {
                String data = update.getCallbackQuery().getData();
                Long adminChatId = update.getCallbackQuery().getMessage().getChatId();
                if (data.startsWith("complete_order:")) {
                    String phoneNumber = data.replace("complete_order:", "");
                    List<Order> order = orderService.getOrderById(UUID.fromString(phoneNumber));
                    order.forEach(o-> {
                        if (o.getStatus().getLabel().equals("New")) {
                            handleOrderCompletion(o, adminChatId);
                        }
                    });
                }

                if ("admin_back".equals(data)) {
                    sendAdminMainMenu(adminChatId);
                }
            }

            if (update.hasMessage() && update.getMessage().hasText()) {
                Long chatId = update.getMessage().getChatId();
                Long userId = update.getMessage().getFrom().getId();
                String messageText = update.getMessage().getText();
                Integer savingDateInSec = update.getMessage().getDate();
                LocalDateTime savingLocalDate = Instant.ofEpochSecond(savingDateInSec).atZone(ZoneId.of("Europe/Kyiv")).toLocalDateTime();

                boolean isAdminUser = botAdminService.getBotAdmins().stream()
                        .anyMatch(ba -> ba.getBotUserId().equals(userId));

                if (isAdminUser) {
                    handleAdminCommand(chatId, messageText, savingLocalDate);
                } else {
                    handleUserCommand(chatId, messageText);
                }
            }
        } catch (Exception e) {
            sendMessage(update.getMessage().getChatId(), "–î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–≥–ª–∏—Å—å, –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ: " + e.getMessage());
        }
    }

    private void sendSaleSubMenu(Long chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"));
        row1.add(new KeyboardButton("–î–æ–¥–∞—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");
        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void handleAdminCommand(Long chatId, String messageText, LocalDateTime savingLocalDate) {
        Map<String, Runnable> commands = getStringRunnableMap(chatId);
        AdminAction state = adminStates.getOrDefault(chatId, AdminAction.NONE);

        switch (messageText) {
            case "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è" :
                sendOrderListInline(chatId);
                return;
            case "–ù–∞ –ø—Ä–æ–¥–∞–∂":
                sendSaleSubMenu(chatId);
                return;
            case "–î–æ–¥–∞—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂":
                sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:");
                adminStates.put(chatId, AdminAction.WAITING_FOR_STOCK_INPUT);
                return;
            case "–î–æ–¥–∞—Ç–∏ —è–π—Ü—è":
                sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å:");
                adminStates.put(chatId, AdminAction.WAITING_FOR_NEW_EGGS);
                return;
            case "/start":
            case "‚¨Ö –ù–∞–∑–∞–¥":
                adminStates.put(chatId, AdminAction.NONE);
                sendAdminMainMenu(chatId);
                return;
        }

        if (state == AdminAction.WAITING_FOR_NEW_EGGS || state == AdminAction.WAITING_FOR_STOCK_INPUT) {
            try {
                int quantity = Integer.parseInt(messageText);

                if (state == AdminAction.WAITING_FOR_NEW_EGGS) {
                    saveEggCount(chatId, messageText, savingLocalDate);
                    sendMessage(chatId, "‚úÖ –î–æ–¥–∞–Ω–æ " + quantity + " —è—î—Ü—å.");
                } else {
                    Sales sales = salesService.getAmoutToSale(LocalDate.now());
                    if (sales == null) {
                        sales = new Sales();
                    }
                    sales.setAmountToSale(quantity);
                    sales.setDateToThisAmount(LocalDate.now());
                    salesService.saveAmountToSale(sales);
                    sendMessage(chatId, "‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂ " + quantity + " —è—î—Ü—å.");
                }

                adminStates.put(chatId, AdminAction.NONE);
                sendAdminMainMenu(chatId);
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 30");
            }
            return;
        }

        if (commands.containsKey(messageText)) {
            adminStates.put(chatId, AdminAction.NONE);
            commands.get(messageText).run();
            return;
        }

        sendMessage(chatId, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }

    private void sendOrderListInline(Long chatId) {
        List<Order> newOrders = orderService.getOrderByStatus(OrderStatus.NEW);

        if (newOrders.isEmpty()) {
            sendMessage(chatId, "üì≠ –ù–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Order order : newOrders) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("‚úÖ —Ç–µ–ª. " + order.getPhoneNumber() + " :: " +
                    " " + order.getAmount() + " —è—î—Ü—å. ü•ö");
            button.setCallbackData("complete_order:" + order.getId());

            rows.add(List.of(button));
        }

        InlineKeyboardButton backButton = new InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥");
        backButton.setCallbackData("admin_back");
        rows.add(List.of(backButton));

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleOrderCompletion(Order order, Long adminChatId) {

        if (order == null) {
            sendMessage(adminChatId, "‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        if (OrderStatus.COMPLETED.equals(order.getStatus())) {
            sendMessage(adminChatId, "‚ö†Ô∏è –¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ.");
            return;
        }

        order.setStatus(OrderStatus.COMPLETED);
        orderService.saveOrder(order);

        sendMessage(adminChatId, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è # " + order.getPhoneNumber() + " –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.");

        String userMsg = String.format(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ %d —è—î—Ü—å –≥–æ—Ç–æ–≤–µ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è!",
                order.getAmount()
        );
        sendMessage(order.getChatId(), userMsg);

        sendOrderListInline(adminChatId);
    }

    private void sendAdminMainMenu(Long chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"));
        row1.add(new KeyboardButton("–í—á–æ—Ä–∞"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–î–æ–¥–∞—Ç–∏ —è–π—Ü—è"));
        row2.add(new KeyboardButton("–ú—ñ—Å—è—Ü—ñ"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("–ù–∞ –ø—Ä–æ–¥–∞–∂"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞:");
        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleUserCommand(Long chatId, String text) {
        List<Order> orders = orderService.getOrderByChatId(chatId);

        if ("/start".equals(text) || "‚¨Ö –ù–∞–∑–∞–¥".equals(text)) {
            sendUserMainMenu(chatId);
            return;
        }

        switch (text) {
            case "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
                sendUserOrderHistory(chatId);
                return;
            case "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
                sendQuantitySelectionMenu(chatId);
                return;

            case "10":
            case "15":
            case "20":
            case "30":
            case "40":
            case "50":
            case "60":
                int quantity = Integer.parseInt(text);
                if (orders.isEmpty()) {
                    askForPhone(chatId);
                    pendingOrders.put(chatId, new UserData(quantity));
                } else {
                    saveOrder(chatId, new UserData(quantity), orders);
                    sendConfirmation(chatId);
                   sendUserMainMenu(chatId);
                }
                return;

            case "–ù–∞ –ø—Ä–æ–¥–∞–∂":
                String stat = formatSalesStatistic(salesService.getAmoutToSale(LocalDate.now()));
                sendMessage(chatId, stat);
                return;
        }

        if (pendingOrders.containsKey(chatId)) {
            String phone = text.trim();

            if (!isValidPhoneNumber(phone)) {
                sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: +380XXXXXXXXX");
                return;
            }

            UserData userData = pendingOrders.get(chatId);
            userData.setPhoneNumber(phone);

            saveOrder(chatId, userData, orders);
            pendingOrders.remove(chatId);
            sendConfirmation(chatId);
            return;
        }

        sendUserMainMenu(chatId);
    }

    public static boolean isValidPhoneNumber(String phone) {
        try {
            PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
            Phonenumber.PhoneNumber numberProto = phoneUtil.parse(phone, "UA");
            return phoneUtil.isValidNumber(numberProto);
        } catch (Exception e) {
            return false;
        }
    }

    private void sendUserOrderHistory(Long chatId) {
        List<Order> userOrders = orderService.getOrderByChatId(chatId);

        if (userOrders.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.");
            return;
        }

        StringBuilder message = new StringBuilder("–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n");
        for (Order order : userOrders) {
            message.append(String.format(
                    "#%d ‚Äî %d —à—Ç ‚Äî %s\n",
                    order.getChatId(),
                    order.getAmount(),
                    order.getStatus() == OrderStatus.NEW ? "üü° –ù–û–í–ï" : "‚úÖ –í–ò–ö–û–ù–ê–ù–û"
            ));
        }

        message.append("\n‚¨Ö –ù–∞–∑–∞–¥");

        sendMessage(chatId, message.toString());
    }

    private void saveOrder(Long chatId, UserData userData, List<Order> orders) {
        String existingPhoneNumber = null;
        if(!orders.isEmpty()) {
            for (Order existingOrder : orders) {
                if (OrderStatus.NEW.equals(existingOrder.getStatus())) {
                    existingOrder.setAmount(existingOrder.getAmount() + userData.getAmount());
                    orderService.saveOrder(existingOrder);
                    sendMessage(chatId, "‚úÖ –í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.");
                    return;
                } else {
                    existingPhoneNumber = existingOrder.getPhoneNumber();
                }
            }
        }
        Order newOrder = new Order();
        newOrder.setAmount(userData.getAmount());
        newOrder.setPhoneNumber(existingPhoneNumber ==null ?userData.getPhoneNumber():existingPhoneNumber);
        newOrder.setChatId(chatId);
        newOrder.setStatus(OrderStatus.NEW);
        orderService.saveOrder(newOrder);
        sendMessage(chatId, "‚úÖ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –î—è–∫—É—î–º–æ!");
    }

    private void sendUserMainMenu(Long chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"));
        row1.add(new KeyboardButton("üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"));
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ù–∞ –ø—Ä–æ–¥–∞–∂"));
        keyboard.add(row2);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false); // <- —â–æ–± –Ω–µ –∑–Ω–∏–∫–∞–ª–∞

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:");
        message.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void askForPhone(Long chatId) {
        SendMessage msg = new SendMessage(chatId.toString(), "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:");
        msg.setParseMode("Markdown");

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendConfirmation(Long chatId) {
        SendMessage msg = new SendMessage(chatId.toString(), "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞.");

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendQuantitySelectionMenu(Long chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("10"), new KeyboardButton("15"), new KeyboardButton("20"))));
        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("30"), new KeyboardButton("40"), new KeyboardButton("50"))));
        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("60"), new KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))));

        markup.setKeyboard(keyboard);
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(true);

        SendMessage msg = new SendMessage(chatId.toString(), "ü•ö –û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å:");
        msg.setReplyMarkup(markup);

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void saveEggCount(Long chatId, String messageText, LocalDateTime savingTime) {
        eggsService.addEgg(messageText, savingTime);
        sendMessage(chatId, "üíæ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞: " + messageText);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private Map<String, Runnable> getStringRunnableMap(Long chatId) {
        List<Counter> allStatistic = counterService.getAllStatistic();

        return Map.of(
                "–°—å–æ–≥–æ–¥–Ω—ñ", () -> sendDayAmount(chatId, LocalDate.now(), formatDayStatistic("—Å—å–æ–≥–æ–¥–Ω—ñ")),
                "–í—á–æ—Ä–∞", () -> sendDayAmount(chatId, LocalDate.now().minusDays(1), formatDayStatistic("–≤—á–æ—Ä–∞")),
                "–ú—ñ—Å—è—Ü—ñ", () -> sendMessage(chatId, formatMonthStatistic(counterService.calculateAmountByMonth(allStatistic))),
                "–¢–∏–∂–Ω—ñ(–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)", () -> sendMessage(chatId, formatWeekStatistic(counterService.calculateAmountByWeek(allStatistic))),
                "–ù–∞ –ø—Ä–æ–¥–∞–∂", () -> sendMessage(chatId, formatSalesStatistic(salesService.getAmoutToSale(LocalDate.now())))
        );
    }

    private String formatDayStatistic(String dayLabel) {
        return String.format("üìä –ü–æ–∫–∞–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ %s\nüìÖ %s —è—î—Ü—å: ", dayLabel, dayLabel.substring(0, 1).toUpperCase() + dayLabel.substring(1));
    }

    private String formatMonthStatistic(Map<Month, Integer> monthStatistic) {
        StringBuilder monthBuilder = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è–º:\n\n");
        monthStatistic.forEach((month, amount) -> {
            if (amount != 0) {
                monthBuilder.append("üìÖ ")
                        .append(MonthView.valueOf(month.name()).getMonthName())
                        .append(": ")
                        .append(amount)
                        .append(" ü•ö\n");
            }
        });
        return monthBuilder.toString();
    }

    private String formatWeekStatistic(Map<Integer, Integer> monthsStatistic) {
        StringBuilder weekStatBuilder = new StringBuilder("üìä –ü–æ–∫–∞–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–∂–Ω—ñ:\n\n");
        Map<Integer, Integer> weeksStatistic = new TreeMap<>();

        YearMonth currentMonth = YearMonth.now();
        int daysInMonth = currentMonth.lengthOfMonth();
        int firstDayOfWeek = currentMonth.atDay(1).getDayOfWeek().getValue();

        for (int day = 1; day <= daysInMonth; day++) {
            int weekNumber = (day + firstDayOfWeek - 2) / 7;
            weeksStatistic.merge(weekNumber, monthsStatistic.getOrDefault(day, 0), Integer::sum);
        }

        weeksStatistic.forEach((week, amount) -> {
            if (week != 0 && amount != 0) {
                weekStatBuilder.append("üóì –¢–∏–∂–¥–µ–Ω—å ").append(week).append(": ").append(amount).append(" ü•ö\n");
            }
        });

        return weekStatBuilder.toString();
    }

    private String formatSalesStatistic(Sales sales) {
        if (sales != null && sales.getAmountToSale() > 0) {
            LocalDate date = sales.getDateToThisAmount();
            int amount = sales.getAmountToSale();

            String dateString = String.format("\uD83D\uDCC5 %d %s %d",
                    date.getDayOfMonth(),
                    MonthView.valueOf(date.getMonth().name()).getMonthName(),
                    date.getYear()
            );

            String amountString = String.format("\uD83E\uDD5A –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: %d —à—Ç.", amount);

            return dateString + System.lineSeparator() + amountString;
        } else {
            return "\uD83D\uDE1Eü•ö –ù–∞–∂–∞–ª—å, –Ω–∞ –ø—Ä–æ–¥–∞–∂ –Ω–µ–º–∞—î —è—î—Ü—å ü•ö\uD83D\uDE1E";
        }
    }

    public void sendDayAmount(Long chatId, LocalDate date, String message) {
        Optional<Counter> counter = counterService.getCounterByDate(date);
        counter.ifPresentOrElse(
                c -> sendMessage(chatId, message + c.getAmount() +
                        System.lineSeparator() +
                        "\uD83C\uDF21\uFE0F  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è: " +
                        c.getWeatherForecast().getTemperature() + "¬∞C"),
                () -> sendMessage(chatId, "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        );
    }
}
