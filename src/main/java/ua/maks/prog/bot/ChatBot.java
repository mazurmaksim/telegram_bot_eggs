package ua.maks.prog.bot;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ua.maks.prog.config.BotConfig;
import ua.maks.prog.entity.BotAdmin;
import ua.maks.prog.entity.Counter;
import ua.maks.prog.entity.Sales;
import ua.maks.prog.service.BotAdminService;
import ua.maks.prog.service.CounterService;
import ua.maks.prog.service.EggsService;
import ua.maks.prog.service.SalesService;
import ua.maks.prog.views.MonthView;

import java.time.*;
import java.util.*;

@Component
public class ChatBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final EggsService eggsService;
    private final CounterService counterService;
    private final SalesService salesService;
    private final BotAdminService botAdminService;
    private final Map<Long, Integer> pendingOrders = new HashMap<>();

    public ChatBot(BotConfig botConfig, EggsService eggsService, CounterService counterService, SalesService salesService, BotAdminService botAdminService) {
        this.botConfig = botConfig;
        this.eggsService = eggsService;
        this.counterService = counterService;
        this.salesService = salesService;
        this.botAdminService = botAdminService;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                Long chatId = update.getMessage().getChatId();
                Long userId = update.getMessage().getFrom().getId();
                String messageText = update.getMessage().getText();
                Integer savingDateInSec = update.getMessage().getDate();
                LocalDateTime savingLocalDate = Instant.ofEpochSecond(savingDateInSec).atZone(ZoneId.of("Europe/Kyiv")).toLocalDateTime();

                boolean isAdminUser = botAdminService.getBotAdmins().stream()
                        .anyMatch(ba -> ba.getBotUserId().equals(userId));

                if (isAdminUser) {
                    handleAdminCommand(chatId, messageText, savingLocalDate, update);
                } else {
                    handleUserCommand(chatId, messageText);
                }
            }
        } catch (Exception e) {
            sendMessage(update.getMessage().getChatId(), "–î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–≥–ª–∏—Å—å, –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ: " + e.getMessage());
        }
    }

    private void handleAdminCommand(Long chatId, String messageText, LocalDateTime savingLocalDate, Update update) {
        Map<String, Runnable> commands = getStringRunnableMap(chatId);

        if ("/start".equals(messageText)) {
            sendAdminMainMenu(update.getMessage());
        } else if (commands.containsKey(messageText)) {
            commands.get(messageText).run();
        } else {
            saveEggCount(chatId, messageText, savingLocalDate);
        }
    }

    private void sendAdminMainMenu(Message message) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"));
        row1.add(new KeyboardButton("–í—á–æ—Ä–∞"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–¢–∏–∂–Ω—ñ(–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)"));
        row2.add(new KeyboardButton("–ú—ñ—Å—è—Ü—ñ"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("–ù–∞ –ø—Ä–æ–¥–∞–∂"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(message.getChatId().toString());
        sendMessage.setText("–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞:");
        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleUserCommand(Long chatId, String text) {
        switch (text) {
            case "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
                sendQuantitySelectionMenu(chatId);
                break;
            case "10":
            case "15":
            case "20":
            case "30":
            case "40":
            case "50":
            case "60":
                pendingOrders.put(chatId, Integer.parseInt(text));
                askForNameAndPhone(chatId);
                break;
            default:
                if (pendingOrders.containsKey(chatId)) {
                    String nameAndPhone = text;
                    saveOrder(chatId, pendingOrders.get(chatId), nameAndPhone);
                    pendingOrders.remove(chatId);
                    sendConfirmation(chatId);
                } else {
                    sendUserMainMenu(chatId);
                }
        }
    }

    private void saveOrder(Long chatId, int quantity, String contactInfo) {
        System.out.printf("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: %d —è—î—Ü—å –≤—ñ–¥ %d, –∫–æ–Ω—Ç–∞–∫—Ç: %s%n", quantity, chatId, contactInfo);
    }

    private void sendUserMainMenu(Long chatId) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ù–∞ –ø—Ä–æ–¥–∞–∂"));
        row1.add(new KeyboardButton("–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);

        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText("–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:");
        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void askForNameAndPhone(Long chatId) {
        SendMessage msg = new SendMessage(chatId.toString(), "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n**–Ü–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω**");
        msg.setParseMode("Markdown");

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendConfirmation(Long chatId) {
        SendMessage msg = new SendMessage(chatId.toString(), "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞.");

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendQuantitySelectionMenu(Long chatId) {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("10"), new KeyboardButton("15"), new KeyboardButton("20"))));
        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("30"), new KeyboardButton("40"), new KeyboardButton("50"))));
        keyboard.add(new KeyboardRow(List.of(new KeyboardButton("60"))));

        markup.setKeyboard(keyboard);
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(true);

        SendMessage msg = new SendMessage(chatId.toString(), "ü•ö –û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å:");
        msg.setReplyMarkup(markup);

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void saveEggCount(Long chatId, String messageText, LocalDateTime savingTime) {
        eggsService.addEgg(messageText, savingTime);
        sendMessage(chatId, "üíæ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞: " + messageText);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private Map<String, Runnable> getStringRunnableMap(Long chatId) {
        List<Counter> allStatistic = counterService.getAllStatistic();

        Map<String, Runnable> commands = Map.of(
                "–°—å–æ–≥–æ–¥–Ω—ñ", () -> sendDayAmount(chatId, LocalDate.now(), formatDayStatistic("—Å—å–æ–≥–æ–¥–Ω—ñ")),
                "–í—á–æ—Ä–∞", () -> sendDayAmount(chatId, LocalDate.now().minusDays(1), formatDayStatistic("–≤—á–æ—Ä–∞")),
                "–ú—ñ—Å—è—Ü—ñ", () -> sendMessage(chatId, formatMonthStatistic(counterService.calculateAmountByMonth(allStatistic))),
                "–¢–∏–∂–Ω—ñ(–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)", () -> sendMessage(chatId, formatWeekStatistic(counterService.calculateAmountByWeek(allStatistic))),
                "–ù–∞ –ø—Ä–æ–¥–∞–∂", () -> sendMessage(chatId, formatSalesStatistic(salesService.getAmoutToSale(LocalDate.now())))
        );
        return commands;
    }

    private String formatDayStatistic(String dayLabel) {
        return String.format("üìä –ü–æ–∫–∞–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ %s\nüìÖ %s —è—î—Ü—å: ", dayLabel, dayLabel.substring(0, 1).toUpperCase() + dayLabel.substring(1));
    }

    private String formatMonthStatistic(Map<Month, Integer> monthStatistic) {
        StringBuilder monthBuilder = new StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è–º:\n\n");
        monthStatistic.forEach((month, amount) -> {
            if (amount != 0) {
                monthBuilder.append("üìÖ ")
                        .append(MonthView.valueOf(month.name()).getMonthName())
                        .append(": ")
                        .append(amount)
                        .append(" ü•ö\n");
            }
        });
        return monthBuilder.toString();
    }

    private String formatWeekStatistic(Map<Integer, Integer> monthsStatistic) {
        StringBuilder weekStatBuilder = new StringBuilder("üìä –ü–æ–∫–∞–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–∂–Ω—ñ:\n\n");
        Map<Integer, Integer> weeksStatistic = new TreeMap<>();

        YearMonth currentMonth = YearMonth.now();
        int daysInMonth = currentMonth.lengthOfMonth();
        int firstDayOfWeek = currentMonth.atDay(1).getDayOfWeek().getValue();

        for (int day = 1; day <= daysInMonth; day++) {
            int weekNumber = (day + firstDayOfWeek - 2) / 7;
            weeksStatistic.merge(weekNumber, monthsStatistic.getOrDefault(day, 0), Integer::sum);
        }

        weeksStatistic.forEach((week, amount) -> {
            if (week != 0 && amount != 0) {
                weekStatBuilder.append("üóì –¢–∏–∂–¥–µ–Ω—å ").append(week).append(": ").append(amount).append(" ü•ö\n");
            }
        });

        return weekStatBuilder.toString();
    }

    private String formatSalesStatistic(Sales sales) {
        if (sales != null && sales.getAmountToSale() > 0) {
            LocalDate date = sales.getDateToThisAmount();
            int amount = sales.getAmountToSale();

            String dateString = String.format("\uD83D\uDCC5 %d %s %d",
                    date.getDayOfMonth(),
                    MonthView.valueOf(date.getMonth().name()).getMonthName(),
                    date.getYear()
            );

            String amountString = String.format("\uD83E\uDD5A –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: %d —à—Ç.", amount);

            return dateString + System.lineSeparator() + amountString;
        } else {
            return "\uD83D\uDE1Eü•ö –ù–∞–∂–∞–ª—å, –Ω–∞ –ø—Ä–æ–¥–∞–∂ –Ω–µ–º–∞—î —è—î—Ü—å ü•ö\uD83D\uDE1E";
        }
    }

    public void sendDayAmount(Long chatId, LocalDate date, String message) {
        Optional<Counter> counter = counterService.getCounterByDate(date);
        counter.ifPresentOrElse(
                c -> sendMessage(chatId, message + c.getAmount() +
                        System.lineSeparator() +
                        "\uD83C\uDF21\uFE0F  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è: " +
                        c.getWeatherForecast().getTemperature() + "¬∞C"),
                () -> sendMessage(chatId, "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        );
    }
}
